// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt { quick-tap-ms = <175>; };

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mouse_middle_click {
            bindings = <&mkp MCLK>;
            key-positions = <32 33>;
            layers = <6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp SEMI  &kp COMMA    &kp DOT       &kp P            &kp Y            &kp F              &kp G            &kp C         &kp R            &kp L
&kp A     &hml LALT O  &hml RCTRL E  &hml LEFT_GUI U  &kp I            &kp D              &hmr LEFT_GUI H  &hmr LCTRL T  &hmr LEFT_ALT N  &kp S
&kp SQT   &kp Q        &kp J         &kp K            &kp X            &kp B              &kp M            &kp W         &kp V            &kp Z
                                     &lt 2 ESCAPE     &ht TAB SPACE    &mt LSHIFT RETURN  &lt 1 BSPC
            >;
        };

        symb_layer {
            bindings = <
&none     &kp LBKT  &kp LBRC   &kp RBRC      &none        &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL  &kp AT    &kp HASH   &kp DLLR      &kp PRCNT    &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH  &kp GRAVE
&none     &none     &kp SLASH  &kp QUESTION  &none        &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE  &mo 5
                               &trans        &none        &none      &trans
            >;
        };

        numnav_layer {
            bindings = <
&kp INS  &kp PG_DN  &kp UP    &kp PG_UP  &none    &kp FSLH  &kp N7  &kp N8  &kp N9  &kp MINUS
&kp DEL  &kp LEFT   &kp DOWN  &kp RIGHT  &none    &kp STAR  &kp N4  &kp N5  &kp N6  &kp PLUS
&mo 6    &none      &kp HOME  &kp END    &none    &kp DOT   &kp N1  &kp N2  &kp N3  &kp RET
                              &trans     &none    &kp N0    &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset      &none  &none  &none       &bt BT_SEL 0    &none  &none  &none  &none  &sys_reset
&bootloader     &none  &none  &none       &bt BT_SEL 1    &none  &to 4  &none  &none  &bootloader
&bt BT_CLR_ALL  &none  &none  &bt BT_CLR  &bt BT_SEL 2    &none  &none  &none  &none  &none
                              &none       &none           &none  &none
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E    &kp R        &none  &none  &none  &none  &none
&kp LSHFT  &kp A  &kp S  &kp D    &kp F        &none  &to 0  &none  &none  &none
&kp LCTRL  &kp Z  &kp X  &kp C    &kp V        &none  &none  &none  &none  &none
                         &kp TAB  &kp SPACE    &none  &none
            >;
        };

        function_layer {
            bindings = <
&none  &kp C_MUTE  &kp C_VOL_DN      &kp C_VOL_UP          &none              &kp F1  &kp F2   &kp F3   &kp F4   &none
&none  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT            &kp PRINTSCREEN    &kp F5  &kp F6   &kp F7   &kp F8   &none
&none  &none       &kp C_BRI_DEC     &kp C_BRIGHTNESS_INC  &none              &kp F9  &kp F10  &kp F11  &kp F12  &none
                                     &none                 &none              &none   &none
            >;
        };

        mouse_layer {
            bindings = <
&none  &none  &none  &none  &none    &none      &msc MOVE_DOWN  &mmv MOVE_UP    &msc MOVE_UP     &none
&none  &none  &none  &none  &none    &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&none  &none  &none  &none  &none    &none      &none           &none           &none            &none
                     &none  &none    &mkp LCLK  &mkp RCLK
            >;
        };
    };
};
